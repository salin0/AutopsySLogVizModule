/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package slogviz1;

import java.awt.Component;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.ProcessBuilder.Redirect;
import java.util.logging.Level;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import javax.swing.DefaultListModel;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.TskException;

/**
 *
 * @author linus
 */
@ServiceProvider(service = DataContentViewer.class)
public class DataContentViewerSlogViz extends javax.swing.JPanel implements org.sleuthkit.autopsy.corecomponentinterfaces.DataContentViewer{
    
    public static final long READ_LENGTH = 16384;
    public static final String USER_DIR_PATH = System.getProperty("user.dir");
    public static final String SLOGVIZ_FILE_PATH = USER_DIR_PATH + File.separator + "slogviz";
    public static final String ERROR_LOG_NAME = "callSLogVizLog.txt";
    public static final String USAGE_LOG_NAME = "SLogVizUsageLog.txt";
    public static final String PYTHON_COMMAND = "python";
    
    //private ;
    private byte[] buf = new byte[(int) READ_LENGTH];
    
    private Content c;
    private ArrayList<Content> prev;
    private DefaultListModel<String> listModel;
    
    /**
     * Creates new form SlogVizJPanel
     */
    public DataContentViewerSlogViz() {
        initComponents();
        this.c = null;
        this.prev = new ArrayList<>(0);
        this.listModel = (DefaultListModel<String>) this.jList1.getModel();
        try{
            new File(SLOGVIZ_FILE_PATH).mkdirs();
        } catch (SecurityException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(10);
        jTextArea2.setRows(5);
        jTextArea2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jTextArea1.text")); // NOI18N
        jScrollPane4.setViewportView(jTextArea2);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton1, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton1.text")); // NOI18N

        buttonGroup1.add(jRadioButton2);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton2, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton2.text")); // NOI18N

        buttonGroup1.add(jRadioButton3);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton3, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton3.text")); // NOI18N

        buttonGroup1.add(jRadioButton4);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton4, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton4.text")); // NOI18N

        buttonGroup1.add(jRadioButton5);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton5, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton5.text")); // NOI18N

        buttonGroup1.add(jRadioButton6);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton6, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jRadioButton6.text")); // NOI18N

        jList1.setModel(new DefaultListModel<String>());
        jList1.setToolTipText(org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jList1.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(jList1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jLabel1.text")); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(238, 238, 238));
        jTextArea1.setColumns(10);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jTextArea1.text")); // NOI18N
        jScrollPane2.setViewportView(jTextArea1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jLabel2.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(DataContentViewerSlogViz.class, "DataContentViewerSlogViz.jTextField1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton1))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton6)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jRadioButton1.setSelected(true);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int state = -1;
        if(jRadioButton1.isSelected()){
            state = 0;
        }
        if(jRadioButton2.isSelected()){
            state = 1;
        }
        if(jRadioButton3.isSelected()){
            state = 2;
        }
        if(jRadioButton4.isSelected()){
            state = 3;
        }
        if(jRadioButton5.isSelected()){
            state = 4;
        }
        if(jRadioButton6.isSelected()){
            state = 5;
        }
            
        if(state == -1){
            return;
        }
        
        String timeoffset = jTextField1.getText();
        if(timeoffset == null || !Pattern.matches("^[+-]{1}(\\d){4}$", timeoffset)){
            timeoffset = "+0000";
        }
        int[] index = this.jList1.getSelectedIndices();
        
        this.writeFiles(index, true);
        this.callPython(index, state, timeoffset);
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void setNode(Node node) {
        if(this.c != null){
            this.addPreviousContent();
        }
        
        if(node == null) {
            this.c = null;
            resetComponent();
            return;
        }
        
        Lookup lookup = node.getLookup();
        this.c = lookup.lookup(Content.class); 
        resetComponent();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getTitle() {
        return "SLogViz: Log file visualization";
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getToolTip() {
        return "SLogVIZ is designed to be a helpful tool for forensic investigations by producing visualizations of log files.";
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public DataContentViewer createInstance() {
        return new DataContentViewerSlogViz();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Component getComponent() {
        return this;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void resetComponent() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isSupported(Node node) {
        if (node == null) {
            return false;
        }
        
        org.sleuthkit.datamodel.AbstractFile abstractFile = node.getLookup().lookup(AbstractFile.class);
        if(abstractFile == null){
            return false;
        }
        
        String fileName = abstractFile.getName();
        boolean contains = fileName.matches("^.*log\\.?\\d*\\.?(gz)?$") || fileName.matches("^.*\\.evtx$") || fileName.matches("^.*places.*\\.sqlite$") || fileName.matches("^.*History$");
        return abstractFile.getSize() > 0 && !abstractFile.isDir() && contains;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int isPreferred(Node node) {
        return 7;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void callPython(int[] index, int state, String timeoffset) {
        try{
            String name = this.c.getName();
            if(name.endsWith(".gz")){
                name = name.substring(0, name.length()-3);
            }
            String pathArg = SLOGVIZ_FILE_PATH + File.separator + name;
            for(int index1 : index){
                pathArg += ",";
                name = this.prev.get(index1).getName();
                if(name.endsWith(".gz")){
                name = name.substring(0, name.length()-3);
                }
                pathArg += SLOGVIZ_FILE_PATH + File.separator + name;         
            }
            
            ProcessBuilder pb = new ProcessBuilder(PYTHON_COMMAND, "-m", "slogviz", "-f", pathArg, "-n", Integer.toString(state), "-t", timeoffset);
            File log = new File(SLOGVIZ_FILE_PATH + File.separator + ERROR_LOG_NAME);
            pb.redirectErrorStream(true);
            pb.redirectOutput(Redirect.appendTo(log));
            Process process = pb.start();
            logUsage(pathArg, state, timeoffset);
        }catch (IOException ex){
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void writeFiles(int[] index, boolean currentFile){
        if(currentFile){
            writeFile(this.c);
        }
        for(int index1: index){
            writeFile(this.prev.get(index1));   
        }
    }

    private void writeFile(Content con){
        if (con == null){
            return;
        }
        
        String path = SLOGVIZ_FILE_PATH + File.separator + con.getName();
        File file = new File(path);
        if(file.exists() && file.canRead() && file.isFile()){
            return;
        }
        
        OutputStream os;
        try {
            os = new FileOutputStream(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        file.deleteOnExit();
        
        int byteRead;
        try {
            this.buf = new byte[(int)READ_LENGTH];
            long offset=0; 
            byteRead = con.read(this.buf, offset, READ_LENGTH); //read
            while(byteRead != -1){
                os.write(this.buf); //write
                offset += READ_LENGTH;
                this.buf = new byte[(int)READ_LENGTH];
                byteRead = con.read(this.buf, offset, READ_LENGTH); //read
            }
                    
        } catch (TskException | IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            os.flush();
            os.close();
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(con.getName().endsWith(".gz")){
            unzipFile(con);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void unzipFile(Content con) {
        String name = con.getName();
        String pathIn = SLOGVIZ_FILE_PATH + File.separator + name;
        String pathOut = SLOGVIZ_FILE_PATH + File.separator + name.substring(0, name.length()-3);
        File fileIn = new File(pathIn);
        File fileOut = new File(pathOut);
        GZIPInputStream inStream;
        FileOutputStream outStream;
        
        try {
            inStream = new GZIPInputStream(new FileInputStream(fileIn));
            outStream = new FileOutputStream(fileOut);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
            return;
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        fileOut.deleteOnExit();
        
        try {
            int data = inStream.read();
            while(data != -1){
                outStream.write(data);
                data = inStream.read();
            }
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            outStream.flush();
            inStream.close();
            outStream.close();
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
        //Assures that the index for an object in this.prev is always the same index as in this.listModel
    private void addPreviousContent() {
        if(this.c == null){
            return;
        }
        if(this.prev.contains(this.c)){
            this.prev.remove(this.c);
        }
        this.prev.add(0, this.c);
        if(this.listModel.contains(this.c.getName()) && !this.listModel.get(0).equals(this.c.getName())){
            this.listModel.removeElement(this.c.getName());
        }
        String name = this.prev.get(0).getName();
        this.listModel.add(0, name);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void logUsage(String pathArg, int state, String timeoffset) {
        String path = SLOGVIZ_FILE_PATH + File.separator + USAGE_LOG_NAME;
        File log = new File(path);
        String format = "<Date and Time>: <Type of SLogViz plot(s) called>  <Handed over files> <Used time-offset>";
        BufferedWriter outBuf;
        
        try {
            outBuf = new BufferedWriter(new FileWriter(log, true));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
            return;
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        try { 
            Date date = new Date(); 
            String output = date + ": " + Integer.toString(state) + " " + pathArg + " " + timeoffset;
            if(!log.exists()){
                outBuf.append(format);
                outBuf.newLine();
            }
            outBuf.append(output);
            outBuf.newLine();
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try {
            outBuf.flush();
            outBuf.close();
        } catch (IOException ex) {
            Logger.getLogger(DataContentViewerSlogViz.class.getName()).log(Level.SEVERE, null, ex);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}